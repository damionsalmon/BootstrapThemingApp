@using BlazorBootstrap.Demo.RCL.Models
<h4 class="mt-4">Forms</h4>
<hr>

<div class="row">
    <div class="col-md-12 mt-3">
        <AutoComplete @bind-Value="customerName1"
                      TItem="Customer"
                      DataProvider="CustomersDataProvider"
                      PropertyName="CustomerName"
                      Placeholder="Search a customer..."
                      OnChanged="(Customer customer) => OnAutoCompleteChanged(customer)"
                      Size="AutoCompleteSize.Small"/>
    </div>
    <div class="col-md-12 mt-3">
        <CheckboxInput Label="Default checkbox" Value="isChecked" ValueExpression="() => isChecked"
                       ValueChanged="(value) => CheckboxValueChanged(value)"/>
        Current value: @isChecked

        @code
        {
            private bool isChecked;

            private void CheckboxValueChanged(bool value)
            {
                isChecked = value;

                // do something
            }
        }

    </div>
    <div class="col-md-12 mt-3">
        @using System.ComponentModel.DataAnnotations
        

        <EditForm EditContext="@editContext" OnValidSubmit="HandleOnValidSubmit">
            <DataAnnotationsValidator/>

            <div class="form-group row mb-3">
                <label class="col-md-2 col-form-label">Item Price: <span class="text-danger">*</span></label>
                <div class="col-md-10">
                    <CurrencyInput TValue="decimal?" Value="invoice.Price" Locale="en-US" ShowCurrencySymbol="true"
                                   ValueExpression="() => invoice.Price" ValueChanged="(value) => PriceChanged(value)"
                                   Placeholder="Enter price"/>
                    <ValidationMessage For="@(() => invoice.Price)"/>
                </div>
            </div>

            <div class="form-group row mb-3">
                <label class="col-md-2 col-form-label">Item Discount:</label>
                <div class="col-md-10">
                    <CurrencyInput TValue="decimal?" Value="invoice.Discount" Locale="en-US" ShowCurrencySymbol="true"
                                   ValueExpression="() => invoice.Discount"
                                   ValueChanged="(value) => DiscountChanged(value)" Placeholder="Enter discount"/>
                    <ValidationMessage For="@(() => invoice.Discount)"/>
                </div>
            </div>

            <div class="form-group row mb-3">
                <label class="col-md-2 col-form-label">Total Amount: <span class="text-danger">*</span></label>
                <div class="col-md-10">
                    <CurrencyInput TValue="decimal?" @bind-Value="invoice.Total" Locale="en-US"
                                   ShowCurrencySymbol="true" Disabled="true" Placeholder="Enter total"/>
                    <ValidationMessage For="@(() => invoice.Total)"/>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12 text-right">
                    <Button Type="ButtonType.Button" Color="ButtonColor.Secondary" Class="float-end"
                            @onclick="ResetForm">Reset
                    </Button>
                    <Button Type="ButtonType.Submit" Color="ButtonColor.Primary" Class="float-end me-2">Submit</Button>
                </div>
            </div>
        </EditForm>

        @code {
            private Invoice invoice = new();
            private EditContext? editContext;

            protected override void OnInitialized()
            {
                editContext = new EditContext(invoice);
                base.OnInitialized();
            }

            protected override void OnParametersSet()
            {
                CalculateToatl();
                base.OnParametersSet();
            }

            private void PriceChanged(decimal? value)
            {
                invoice.Price = value;
                CalculateToatl();
            }

            private void DiscountChanged(decimal? value)
            {
                invoice.Discount = value;
                CalculateToatl();
            }

            private void CalculateToatl()
            {
                var price = invoice.Price.HasValue ? invoice.Price.Value : 0;
                var discount = invoice.Discount.HasValue ? invoice.Discount.Value : 0;
                invoice.Total = price - discount;
            }

            public void HandleOnValidSubmit()
            {
                Console.WriteLine($"Price: {invoice.Price}");
                Console.WriteLine($"Discount: {invoice.Discount}");
                Console.WriteLine($"Total: {invoice.Total}");
            }

            private void ResetForm()
            {
                invoice = new();
                editContext = new EditContext(invoice);
            }

            public class Invoice
            {
                [Required(ErrorMessage = "Price required.")]
                [Range(60, 500, ErrorMessage = "Price should be between 60 and 500.")]
                public decimal? Price { get; set; } = 22M;

                [Range(0, 50, ErrorMessage = "Discount should be between 0 and 50.")]
                public decimal? Discount { get; set; }

                [Required(ErrorMessage = "Amount required.")]
                [Range(10, 500, ErrorMessage = "Total should be between 60 and 500.")]
                public decimal? Total { get; set; }
            }

        }

    </div>
    <div class="col-md-12 mt-3">
        <div class="mb-3">
            <DateInput TValue="DateOnly" Value="date1" ValueExpression="() => date1"
                       ValueChanged="(value) => DateChanged(value)"/>
        </div>
        <div class="mb-3">Changed date: @date1</div>

        <Button Color="ButtonColor.Primary" @onclick="ChangeDate"> Change Date</Button>

        @code {
            private DateOnly date1 = DateOnly.FromDateTime(DateTime.Now);

            private void DateChanged(DateOnly dateOnly)
            {
                date1 = dateOnly;
            }

            private void ChangeDate() => date1 = DateOnly.FromDateTime(DateTime.Now.AddDays(3));
        }

    </div>
    <div class="col-md-12 mt-3">
        <div class="mb-3">
            <label class="form-label">Enter int number</label>
            <NumberInput TValue="int" @bind-Value="@amount"/>
            <div class="mt-1">Entered Number: @amount</div>
        </div>

        <div class="mb-3">
            <label class="form-label">Enter int? number</label>
            <NumberInput TValue="int?" @bind-Value="@amount2"/>
            <div class="mt-1">Entered Number: @amount2</div>
        </div>

        <div class="mb-3">
            <label class="form-label">Enter float number</label>
            <NumberInput TValue="float" @bind-Value="@amount3"/>
            <div class="mt-1">Entered Number: @amount3</div>
        </div>


        @code {
            private int amount;
            private int? amount2;
            private float amount3;
        }

    </div>
    <hr>
    <div class="row">
        <div class="col-md-12">
            <div class="mb-3">
                <PasswordInput @bind-Value="@enteredPassword" />
            </div>
            <div class="mb-3">Entered password: @enteredPassword</div>

            @code {
                private string? enteredPassword = null;
            }

        </div>
    </div>
</div>

@code {
    private string? customerName1;
    public IEnumerable<Customer>? customers;

    private async Task<AutoCompleteDataProviderResult<Customer>> CustomersDataProvider(AutoCompleteDataProviderRequest<Customer> request)
    {
        if (customers is null) // pull customers only one time for client-side autocomplete
            customers = GetCustomers(); // call a service or an API to pull the customers

        return await Task.FromResult(request.ApplyTo(customers.OrderBy(customer => customer.CustomerName)));
    }

    private IEnumerable<Customer> GetCustomers()
    {
        return new List<Customer>
        {
            new(1, "Pich S"),
            new(2, "sfh Sobi"),
            new(3, "Jojo chan"),
            new(4, "Jee ja"),
            new(5, "Rose Canon"),
            new(6, "Manju A"),
            new(7, "Bandita PA"),
            new(8, "Sagar Adil"),
            new(9, "Isha Wang"),
            new(10, "Daina JJ"),
            new(11, "Komala Mug"),
            new(12, "Dikshita BD"),
            new(13, "Neha Gosar"),
            new(14, "Preeti S"),
            new(15, "Sagar Seth"),
            new(16, "Vinayak MM"),
            new(17, "Vijaya Lakhsmi"),
            new(18, "Jahan K"),
            new(19, "Joy B"),
            new(20, "Zaraiah C"),
            new(21, "Laura L"),
            new(22, "Punith ES")
        };
    }

    private void OnAutoCompleteChanged(Customer customer)
    {
        // TODO: handle your own logic

        // NOTE: do null check
        Console.WriteLine($"'{customer?.CustomerName}' selected.");
    }

}
